"""
Autogenerated file - DO NOT EDIT
If you spot a bug, please report it on the mailing list and/or change the generator.
"""

import attr
from nipype.interfaces.base import (
    Directory,
    File,
    InputMultiPath,
    OutputMultiPath,
    traits,
)
from pydra import ShellCommandTask
from pydra.engine.specs import SpecInfo, ShellSpec


class CreateDICOMSeries:
    """
    title: Create a DICOM Series
    category: Converters
    description: Create a DICOM Series from a Slicer volume. User can specify values for selected DICOM tags in the UI. Given the number of tags DICOM series have, it is impossible to expose all tags in UI. So only important tags can be set by the user.
    version: 0.1.0.$Revision$(alpha)
    documentation-url: https://www.slicer.org/slicerWiki/index.php/Documentation/Nightly/Modules/CreateDICOMSeries
    contributor: Bill Lorensen (GE)
    acknowledgements: This command module was derived from Insight/Examples (copyright) Insight Software Consortium
    """

    input_fields = [
        (
            "patientName",
            attr.ib(
                type=traits.Str,
                metadata={
                    "argstr": "--patientName %s",
                    "help_string": "The name of the patient (0010,0010)",
                },
            ),
        ),
        (
            "patientID",
            attr.ib(
                type=traits.Str,
                metadata={
                    "argstr": "--patientID %s",
                    "help_string": "The patient ID (0010,0020)",
                },
            ),
        ),
        (
            "patientBirthDate",
            attr.ib(
                type=traits.Str,
                metadata={
                    "argstr": "--patientBirthDate %s",
                    "help_string": "Patient birth date (0010,0030)",
                },
            ),
        ),
        (
            "patientSex",
            attr.ib(
                type=traits.Str,
                metadata={
                    "argstr": "--patientSex %s",
                    "help_string": "Patient sex (0010,0040)",
                },
            ),
        ),
        (
            "patientComments",
            attr.ib(
                type=traits.Str,
                metadata={
                    "argstr": "--patientComments %s",
                    "help_string": "Patient comments (0010,4000)",
                },
            ),
        ),
        (
            "studyID",
            attr.ib(
                type=traits.Str,
                metadata={
                    "argstr": "--studyID %s",
                    "help_string": "The study ID (0020,0010)",
                },
            ),
        ),
        (
            "studyDate",
            attr.ib(
                type=traits.Str,
                metadata={
                    "argstr": "--studyDate %s",
                    "help_string": "The date of the study (0008,0020)",
                },
            ),
        ),
        (
            "studyTime",
            attr.ib(
                type=traits.Str,
                metadata={
                    "argstr": "--studyTime %s",
                    "help_string": "The time of the study (0008,0030)",
                },
            ),
        ),
        (
            "studyComments",
            attr.ib(
                type=traits.Str,
                metadata={
                    "argstr": "--studyComments %s",
                    "help_string": "Study comments (0032,4000)",
                },
            ),
        ),
        (
            "studyDescription",
            attr.ib(
                type=traits.Str,
                metadata={
                    "argstr": "--studyDescription %s",
                    "help_string": "Study description (0008,1030)",
                },
            ),
        ),
        (
            "modality",
            attr.ib(
                type=traits.Str,
                metadata={
                    "argstr": "--modality %s",
                    "help_string": "Modality (0008,0060)",
                },
            ),
        ),
        (
            "manufacturer",
            attr.ib(
                type=traits.Str,
                metadata={
                    "argstr": "--manufacturer %s",
                    "help_string": "Manufacturer (0008,0070)",
                },
            ),
        ),
        (
            "model",
            attr.ib(
                type=traits.Str,
                metadata={"argstr": "--model %s", "help_string": "model (0008,1090)"},
            ),
        ),
        (
            "seriesNumber",
            attr.ib(
                type=traits.Str,
                metadata={
                    "argstr": "--seriesNumber %s",
                    "help_string": "The series number (0020,0011)",
                },
            ),
        ),
        (
            "seriesDescription",
            attr.ib(
                type=traits.Str,
                metadata={
                    "argstr": "--seriesDescription %s",
                    "help_string": "Series description (0008,103E)",
                },
            ),
        ),
        (
            "seriesDate",
            attr.ib(
                type=traits.Str,
                metadata={
                    "argstr": "--seriesDate %s",
                    "help_string": "The date of the series (0008,0021)",
                },
            ),
        ),
        (
            "seriesTime",
            attr.ib(
                type=traits.Str,
                metadata={
                    "argstr": "--seriesTime %s",
                    "help_string": "The time of the series (0008,0031)",
                },
            ),
        ),
        (
            "rescaleIntercept",
            attr.ib(
                type=traits.Float,
                metadata={
                    "argstr": "--rescaleIntercept %f",
                    "help_string": "Rescale interscept (0028,1052). Converts pixel values on disk to pixel values in memory. (Pixel value in memory) = (Pixel value on disk) * rescaleSlope + rescaleIntercept.  Default is 0.0. Data values are converted on write (the data is scaled and shifted so that the slope and interscept will bring it back to the current intensity range).",
                },
            ),
        ),
        (
            "rescaleSlope",
            attr.ib(
                type=traits.Float,
                metadata={
                    "argstr": "--rescaleSlope %f",
                    "help_string": "Rescale slope (0028,1053). Converts pixel values on disk to pixel values in memory. (Pixel value in memory) = (Pixel value on disk) * rescaleSlope + rescaleInterscept.  Default is 1.0. Data values are converted on write (the data is scaled and shifted so that the slope and interscept will bring it back to the current intensity range).",
                },
            ),
        ),
        (
            "contentDate",
            attr.ib(
                type=traits.Str,
                metadata={
                    "argstr": "--contentDate %s",
                    "help_string": "The date of the image content (0008,0023)",
                },
            ),
        ),
        (
            "contentTime",
            attr.ib(
                type=traits.Str,
                metadata={
                    "argstr": "--contentTime %s",
                    "help_string": "The time of the image content (0008,0033)",
                },
            ),
        ),
        (
            "studyInstanceUID",
            attr.ib(
                type=traits.Str,
                metadata={
                    "argstr": "--studyInstanceUID %s",
                    "help_string": "The study instance UID (0020,000d)",
                },
            ),
        ),
        (
            "seriesInstanceUID",
            attr.ib(
                type=traits.Str,
                metadata={
                    "argstr": "--seriesInstanceUID %s",
                    "help_string": "The series instance UID (0020,000e)",
                },
            ),
        ),
        (
            "frameOfReferenceInstanceUID",
            attr.ib(
                type=traits.Str,
                metadata={
                    "argstr": "--frameOfReferenceInstanceUID %s",
                    "help_string": "The frame of reference instance UID (0020,0052)",
                },
            ),
        ),
        (
            "inputVolume",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "%s",
                    "help_string": "Input volume to be resampled",
                    "position": "-1",
                    "exists": "True",
                },
            ),
        ),
        (
            "dicomDirectory",
            attr.ib(
                type=Directory,
                metadata={
                    "argstr": "--dicomDirectory %s",
                    "help_string": "The directory to contain the DICOM series.",
                    "hash_files": "False",
                },
            ),
        ),
        (
            "dicomPrefix",
            attr.ib(
                type=traits.Str,
                metadata={
                    "argstr": "--dicomPrefix %s",
                    "help_string": "The prefix of the DICOM filename.",
                },
            ),
        ),
        (
            "dicomNumberFormat",
            attr.ib(
                type=traits.Str,
                metadata={
                    "argstr": "--dicomNumberFormat %s",
                    "help_string": "The printf-style format to be used when creating the per-slice DICOM filename.",
                },
            ),
        ),
        (
            "reverseImages",
            attr.ib(
                type=traits.Bool,
                metadata={
                    "argstr": "--reverseImages ",
                    "help_string": "Reverse the slices.",
                },
            ),
        ),
        (
            "useCompression",
            attr.ib(
                type=traits.Bool,
                metadata={
                    "argstr": "--useCompression ",
                    "help_string": "Compress the output pixel data.",
                },
            ),
        ),
        (
            "type",
            attr.ib(
                type=traits.Enum,
                metadata={
                    "argstr": "--type %s",
                    "help_string": "Type for the new output volume.",
                },
            ),
        ),
    ]
    output_fields = [
        (
            "dicomDirectory",
            attr.ib(
                type=Directory,
                metadata={
                    "help_string": "The directory to contain the DICOM series.",
                    "exists": "True",
                },
            ),
        )
    ]

    input_spec = SpecInfo(name="Input", fields=input_fields, bases=(ShellSpec,))
    output_spec = SpecInfo(name="Output", fields=output_fields, bases=(ShellSpec,))

    task = ShellCommandTask(
        name="CreateDICOMSeries",
        executable=" CreateDICOMSeries ",
        input_spec=input_spec,
        output_spec=output_spec,
    )


class DWICompare:
    """
    title: Nrrd DWI comparison
    category: Converters
    description: Compares two nrrd format DWI images and verifies that gradient magnitudes, gradient directions, measurement frame, and max B0 value are identicle.  Used for testing DWIConvert.
    version: 5.2.0
    documentation-url: http://www.slicer.org/slicerWiki/index.php/Documentation/4.1/Modules/DWIConvert
    license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt
    contributor: Mark Scully (UIowa)
    acknowledgements: This work is part of the National Alliance for Medical Image Computing (NAMIC), funded by the National Institutes of Health through the NIH Roadmap for Medical Research, Grant U54 EB005149.  Additional support for DTI data produced on Philips scanners was contributed by Vincent Magnotta and Hans Johnson at the University of Iowa.
    """

    input_fields = [
        (
            "inputVolume1",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "--inputVolume1 %s",
                    "help_string": "First input volume (.nhdr or .nrrd)",
                    "exists": "True",
                },
            ),
        ),
        (
            "inputVolume2",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "--inputVolume2 %s",
                    "help_string": "Second input volume (.nhdr or .nrrd)",
                    "exists": "True",
                },
            ),
        ),
        (
            "useIdentityMeasurementFrame",
            attr.ib(
                type=traits.Bool,
                metadata={
                    "argstr": "--useIdentityMeasurementFrame ",
                    "help_string": "Do comparisons with identity mesasurement frames",
                },
            ),
        ),
    ]
    output_fields = []

    input_spec = SpecInfo(name="Input", fields=input_fields, bases=(ShellSpec,))
    output_spec = SpecInfo(name="Output", fields=output_fields, bases=(ShellSpec,))

    task = ShellCommandTask(
        name="DWICompare",
        executable=" DWICompare ",
        input_spec=input_spec,
        output_spec=output_spec,
    )


class DWISimpleCompare:
    """
    title: Nrrd DWI comparison
    category: Converters
    description: Compares two nrrd format DWI images and verifies that gradient magnitudes, gradient directions, measurement frame, and max B0 value are identicle.  Used for testing DWIConvert.
    version: 5.2.0
    documentation-url: http://www.slicer.org/slicerWiki/index.php/Documentation/4.1/Modules/DWIConvert
    license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt
    contributor: Mark Scully (UIowa)
    acknowledgements: This work is part of the National Alliance for Medical Image Computing (NAMIC), funded by the National Institutes of Health through the NIH Roadmap for Medical Research, Grant U54 EB005149.  Additional support for DTI data produced on Philips scanners was contributed by Vincent Magnotta and Hans Johnson at the University of Iowa.
    """

    input_fields = [
        (
            "inputVolume1",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "--inputVolume1 %s",
                    "help_string": "First input volume (.nhdr or .nrrd)",
                    "exists": "True",
                },
            ),
        ),
        (
            "inputVolume2",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "--inputVolume2 %s",
                    "help_string": "Second input volume (.nhdr or .nrrd)",
                    "exists": "True",
                },
            ),
        ),
        (
            "checkDWIData",
            attr.ib(
                type=traits.Bool,
                metadata={
                    "argstr": "--checkDWIData ",
                    "help_string": "check for existence of DWI data, and if present, compare it",
                },
            ),
        ),
    ]
    output_fields = []

    input_spec = SpecInfo(name="Input", fields=input_fields, bases=(ShellSpec,))
    output_spec = SpecInfo(name="Output", fields=output_fields, bases=(ShellSpec,))

    task = ShellCommandTask(
        name="DWISimpleCompare",
        executable=" DWISimpleCompare ",
        input_spec=input_spec,
        output_spec=output_spec,
    )


class OrientScalarVolume:
    """
    title: Orient Scalar Volume
    category: Converters
    description: Orients an output volume. Rearranges the slices in a volume according to the selected orientation. The slices are not interpolated. They are just reordered and/or permuted. The resulting volume will cover the original volume. NOTE: since Slicer takes into account the orientation of a volume, the re-oriented volume will not show any difference from the original volume, To see the difference, save the volume and display it with a system that either ignores the orientation of the image (e.g. Paraview) or displays individual images.
    version: 0.1.0.$Revision$(alpha)
    documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Documentation/Nightly/Modules/OrientImage
    contributor: Bill Lorensen (GE)
    acknowledgements: This work is part of the National Alliance for Medical Image Computing (NAMIC), funded by the National Institutes of Health through the NIH Roadmap for Medical Research, Grant U54 EB005149.
    """

    input_fields = [
        (
            "inputVolume1",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "%s",
                    "help_string": "Input volume 1",
                    "position": "-2",
                    "exists": "True",
                },
            ),
        ),
        (
            "outputVolume",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "%s",
                    "help_string": "The oriented volume",
                    "position": "-1",
                    "hash_files": "False",
                },
            ),
        ),
        (
            "orientation",
            attr.ib(
                type=traits.Enum,
                metadata={
                    "argstr": "--orientation %s",
                    "help_string": "Orientation choices",
                },
            ),
        ),
    ]
    output_fields = [
        (
            "outputVolume",
            attr.ib(
                type=File,
                metadata={
                    "help_string": "The oriented volume",
                    "position": "-1",
                    "exists": "True",
                },
            ),
        )
    ]

    input_spec = SpecInfo(name="Input", fields=input_fields, bases=(ShellSpec,))
    output_spec = SpecInfo(name="Output", fields=output_fields, bases=(ShellSpec,))

    task = ShellCommandTask(
        name="OrientScalarVolume",
        executable=" OrientScalarVolume ",
        input_spec=input_spec,
        output_spec=output_spec,
    )
