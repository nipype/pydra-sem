"""
Autogenerated file - DO NOT EDIT
If you spot a bug, please report it on the mailing list and/or change the generator.
"""

import attr
from nipype.interfaces.base import (
    Directory,
    File,
    InputMultiPath,
    OutputMultiPath,
    traits,
)
from pydra import ShellCommandTask
from pydra.engine.specs import SpecInfo, ShellSpec


class AddScalarVolumes:
    """
    title: Add Scalar Volumes
    category: Filtering.Arithmetic
    description: Adds two images. Although all image types are supported on input, only signed types are produced. The two images do not have to have the same dimensions.
    version: 0.1.0.$Revision$(alpha)
    documentation-url: https://www.slicer.org/wiki/Documentation/Nightly/Modules/Add
    contributor: Bill Lorensen (GE)
    acknowledgements: This work is part of the National Alliance for Medical Image Computing (NAMIC), funded by the National Institutes of Health through the NIH Roadmap for Medical Research, Grant U54 EB005149.
    """

    input_fields = [
        (
            "inputVolume1",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "%s",
                    "help_string": "Input volume 1",
                    "position": "-3",
                    "exists": "True",
                },
            ),
        ),
        (
            "inputVolume2",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "%s",
                    "help_string": "Input volume 2",
                    "position": "-2",
                    "exists": "True",
                },
            ),
        ),
        (
            "outputVolume",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "%s",
                    "help_string": "Volume1 + Volume2",
                    "position": "-1",
                    "hash_files": "False",
                },
            ),
        ),
        (
            "order",
            attr.ib(
                type=traits.Enum,
                metadata={
                    "argstr": "--order %s",
                    "help_string": "Interpolation order if two images are in different coordinate frames or have different sampling.",
                },
            ),
        ),
    ]
    output_fields = [
        (
            "outputVolume",
            attr.ib(
                type=File,
                metadata={
                    "help_string": "Volume1 + Volume2",
                    "position": "-1",
                    "exists": "True",
                },
            ),
        )
    ]

    input_spec = SpecInfo(name="Input", fields=input_fields, bases=(ShellSpec,))
    output_spec = SpecInfo(name="Output", fields=output_fields, bases=(ShellSpec,))

    task = ShellCommandTask(
        name="AddScalarVolumes",
        executable=" AddScalarVolumes ",
        input_spec=input_spec,
        output_spec=output_spec,
    )


class CastScalarVolume:
    """
    title: Cast Scalar Volume
    category: Filtering.Arithmetic
    description: Cast a volume to a given data type.\nUse at your own risk when casting an input volume into a lower precision type!\nAllows casting to the same type as the input volume.
    version: 0.1.0.$Revision: 2104 $(alpha)
    documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Documentation/Nightly/Modules/Cast
    contributor: Nicole Aucoin (SPL, BWH), Ron Kikinis (SPL, BWH)
    acknowledgements: This work is part of the National Alliance for Medical Image Computing (NAMIC), funded by the National Institutes of Health through the NIH Roadmap for Medical Research, Grant U54 EB005149.
    """

    input_fields = [
        (
            "InputVolume",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "%s",
                    "help_string": "Input volume, the volume to cast.",
                    "position": "-2",
                    "exists": "True",
                },
            ),
        ),
        (
            "OutputVolume",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "%s",
                    "help_string": "Output volume, cast to the new type.",
                    "position": "-1",
                    "hash_files": "False",
                },
            ),
        ),
        (
            "type",
            attr.ib(
                type=traits.Enum,
                metadata={
                    "argstr": "--type %s",
                    "help_string": "Scalar data type for the new output volume.",
                },
            ),
        ),
    ]
    output_fields = [
        (
            "OutputVolume",
            attr.ib(
                type=File,
                metadata={
                    "help_string": "Output volume, cast to the new type.",
                    "position": "-1",
                    "exists": "True",
                },
            ),
        )
    ]

    input_spec = SpecInfo(name="Input", fields=input_fields, bases=(ShellSpec,))
    output_spec = SpecInfo(name="Output", fields=output_fields, bases=(ShellSpec,))

    task = ShellCommandTask(
        name="CastScalarVolume",
        executable=" CastScalarVolume ",
        input_spec=input_spec,
        output_spec=output_spec,
    )


class MaskScalarVolume:
    """
    title: Mask Scalar Volume
    category: Filtering.Arithmetic
    description: Masks two images. The output image is set to 0 everywhere except where the chosen label from the mask volume is present, at which point it will retain it's original values. The two images do not have to have the same dimensions.
    version: 0.1.0.$Revision: 8595 $(alpha)
    documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Documentation/Nightly/Modules/Mask
    contributor: Nicole Aucoin (SPL, BWH), Ron Kikinis (SPL, BWH)
    acknowledgements: This work is part of the National Alliance for Medical Image Computing (NAMIC), funded by the National Institutes of Health through the NIH Roadmap for Medical Research, Grant U54 EB005149.
    """

    input_fields = [
        (
            "InputVolume",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "%s",
                    "help_string": "Input volume to be masked",
                    "position": "-3",
                    "exists": "True",
                },
            ),
        ),
        (
            "MaskVolume",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "%s",
                    "help_string": "Label volume containing the mask",
                    "position": "-2",
                    "exists": "True",
                },
            ),
        ),
        (
            "OutputVolume",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "%s",
                    "help_string": "Output volume: Input Volume masked by label value from Mask Volume",
                    "position": "-1",
                    "hash_files": "False",
                },
            ),
        ),
        (
            "label",
            attr.ib(
                type=traits.Int,
                metadata={
                    "argstr": "--label %d",
                    "help_string": "Label value in the Mask Volume to use as the mask",
                },
            ),
        ),
        (
            "replace",
            attr.ib(
                type=traits.Int,
                metadata={
                    "argstr": "--replace %d",
                    "help_string": "Value to use for the output volume outside of the mask",
                },
            ),
        ),
    ]
    output_fields = [
        (
            "OutputVolume",
            attr.ib(
                type=File,
                metadata={
                    "help_string": "Output volume: Input Volume masked by label value from Mask Volume",
                    "position": "-1",
                    "exists": "True",
                },
            ),
        )
    ]

    input_spec = SpecInfo(name="Input", fields=input_fields, bases=(ShellSpec,))
    output_spec = SpecInfo(name="Output", fields=output_fields, bases=(ShellSpec,))

    task = ShellCommandTask(
        name="MaskScalarVolume",
        executable=" MaskScalarVolume ",
        input_spec=input_spec,
        output_spec=output_spec,
    )


class MultiplyScalarVolumes:
    """
    title: Multiply Scalar Volumes
    category: Filtering.Arithmetic
    description: Multiplies two images. Although all image types are supported on input, only signed types are produced. The two images do not have to have the same dimensions.
    version: 0.1.0.$Revision: 8595 $(alpha)
    documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Documentation/Nightly/Modules/Multiply
    contributor: Bill Lorensen (GE)
    acknowledgements: This work is part of the National Alliance for Medical Image Computing (NAMIC), funded by the National Institutes of Health through the NIH Roadmap for Medical Research, Grant U54 EB005149.
    """

    input_fields = [
        (
            "inputVolume1",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "%s",
                    "help_string": "Input volume 1",
                    "position": "-3",
                    "exists": "True",
                },
            ),
        ),
        (
            "inputVolume2",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "%s",
                    "help_string": "Input volume 2",
                    "position": "-2",
                    "exists": "True",
                },
            ),
        ),
        (
            "outputVolume",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "%s",
                    "help_string": "Volume1 * Volume2",
                    "position": "-1",
                    "hash_files": "False",
                },
            ),
        ),
        (
            "order",
            attr.ib(
                type=traits.Enum,
                metadata={
                    "argstr": "--order %s",
                    "help_string": "Interpolation order if two images are in different coordinate frames or have different sampling.",
                },
            ),
        ),
    ]
    output_fields = [
        (
            "outputVolume",
            attr.ib(
                type=File,
                metadata={
                    "help_string": "Volume1 * Volume2",
                    "position": "-1",
                    "exists": "True",
                },
            ),
        )
    ]

    input_spec = SpecInfo(name="Input", fields=input_fields, bases=(ShellSpec,))
    output_spec = SpecInfo(name="Output", fields=output_fields, bases=(ShellSpec,))

    task = ShellCommandTask(
        name="MultiplyScalarVolumes",
        executable=" MultiplyScalarVolumes ",
        input_spec=input_spec,
        output_spec=output_spec,
    )


class SubtractScalarVolumes:
    """
    title: Subtract Scalar Volumes
    category: Filtering.Arithmetic
    description: Subtracts two images. Although all image types are supported on input, only signed types are produced. The two images do not have to have the same dimensions.
    version: 0.1.0.$Revision$(alpha)
    documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Documentation/Nightly/Modules/Subtract
    contributor: Bill Lorensen (GE)
    acknowledgements: This work is part of the National Alliance for Medical Image Computing (NAMIC), funded by the National Institutes of Health through the NIH Roadmap for Medical Research, Grant U54 EB005149.
    """

    input_fields = [
        (
            "inputVolume1",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "%s",
                    "help_string": "Input volume 1",
                    "position": "-3",
                    "exists": "True",
                },
            ),
        ),
        (
            "inputVolume2",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "%s",
                    "help_string": "Input volume 2",
                    "position": "-2",
                    "exists": "True",
                },
            ),
        ),
        (
            "outputVolume",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "%s",
                    "help_string": "Volume1 - Volume2",
                    "position": "-1",
                    "hash_files": "False",
                },
            ),
        ),
        (
            "order",
            attr.ib(
                type=traits.Enum,
                metadata={
                    "argstr": "--order %s",
                    "help_string": "Interpolation order if two images are in different coordinate frames or have different sampling.",
                },
            ),
        ),
    ]
    output_fields = [
        (
            "outputVolume",
            attr.ib(
                type=File,
                metadata={
                    "help_string": "Volume1 - Volume2",
                    "position": "-1",
                    "exists": "True",
                },
            ),
        )
    ]

    input_spec = SpecInfo(name="Input", fields=input_fields, bases=(ShellSpec,))
    output_spec = SpecInfo(name="Output", fields=output_fields, bases=(ShellSpec,))

    task = ShellCommandTask(
        name="SubtractScalarVolumes",
        executable=" SubtractScalarVolumes ",
        input_spec=input_spec,
        output_spec=output_spec,
    )
