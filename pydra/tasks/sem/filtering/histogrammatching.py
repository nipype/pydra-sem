"""
Autogenerated file - DO NOT EDIT
If you spot a bug, please report it on the mailing list and/or change the generator.
"""

import attr
from nipype.interfaces.base import (
    Directory,
    File,
    InputMultiPath,
    OutputMultiPath,
    traits,
)
from pydra import ShellCommandTask
from pydra.engine.specs import SpecInfo, ShellSpec


class HistogramMatching:
    """
    title: Histogram Matching
    category: Filtering
    description: Normalizes the grayscale values of a source image based on the grayscale values of a reference image.  This filter uses a histogram matching technique where the histograms of the two images are matched only at a specified number of quantile values.\n\nThe filter was originally designed to normalize MR images of the sameMR protocol and same body part. The algorithm works best if background pixels are excluded from both the source and reference histograms.  A simple background exclusion method is to exclude all pixels whose grayscale values are smaller than the mean grayscale value. ThresholdAtMeanIntensity switches on this simple background exclusion method.\n\nNumber of match points governs the number of quantile values to be matched.\n\nThe filter assumes that both the source and reference are of the same type and that the input and output image type have the same number of dimension and have scalar pixel types.
    version: 0.1.0.$Revision$(alpha)
    documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Documentation/Nightly/Modules/HistogramMatching
    contributor: Bill Lorensen (GE)
    acknowledgements: This work is part of the National Alliance for Medical Image Computing (NAMIC), funded by the National Institutes of Health through the NIH Roadmap for Medical Research, Grant U54 EB005149.
    """

    input_fields = [
        (
            "numberOfHistogramLevels",
            attr.ib(
                type=traits.Int,
                metadata={
                    "argstr": "--numberOfHistogramLevels %d",
                    "help_string": "The number of hisogram levels to use",
                },
            ),
        ),
        (
            "numberOfMatchPoints",
            attr.ib(
                type=traits.Int,
                metadata={
                    "argstr": "--numberOfMatchPoints %d",
                    "help_string": "The number of match points to use",
                },
            ),
        ),
        (
            "threshold",
            attr.ib(
                type=traits.Bool,
                metadata={
                    "argstr": "--threshold ",
                    "help_string": "If on, only pixels above the mean in each volume are thresholded.",
                },
            ),
        ),
        (
            "inputVolume",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "%s",
                    "help_string": "Input volume to be filtered",
                    "position": "-3",
                    "exists": "True",
                },
            ),
        ),
        (
            "referenceVolume",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "%s",
                    "help_string": "Input volume whose histogram will be matched",
                    "position": "-2",
                    "exists": "True",
                },
            ),
        ),
        (
            "outputVolume",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "%s",
                    "help_string": "Output volume. This is the input volume with intensities matched to the reference volume.",
                    "position": "-1",
                    "hash_files": "False",
                },
            ),
        ),
    ]
    output_fields = [
        (
            "outputVolume",
            attr.ib(
                type=File,
                metadata={
                    "help_string": "Output volume. This is the input volume with intensities matched to the reference volume.",
                    "position": "-1",
                    "exists": "True",
                },
            ),
        )
    ]

    input_spec = SpecInfo(name="Input", fields=input_fields, bases=(ShellSpec,))
    output_spec = SpecInfo(name="Output", fields=output_fields, bases=(ShellSpec,))

    task = ShellCommandTask(
        name="HistogramMatching",
        executable=" HistogramMatching ",
        input_spec=input_spec,
        output_spec=output_spec,
    )
