"""
Autogenerated file - DO NOT EDIT
If you spot a bug, please report it on the mailing list and/or change the generator.
"""

import attr
from nipype.interfaces.base import (
    Directory,
    File,
    InputMultiPath,
    OutputMultiPath,
    traits,
)
from pydra import ShellCommandTask
from pydra.engine.specs import SpecInfo, ShellSpec


class CLIROITest:
    """
    title: CLI ROI Test
    category: Testing
    version: 1.0
    """

    input_fields = [
        ("ri", attr.ib(type=traits.List, metadata={"argstr": "--ri %s"})),
        ("ro", attr.ib(type=InputMultiPath, metadata={"argstr": "--ro %s..."})),
    ]
    output_fields = []

    input_spec = SpecInfo(name="Input", fields=input_fields, bases=(ShellSpec,))
    output_spec = SpecInfo(name="Output", fields=output_fields, bases=(ShellSpec,))

    task = ShellCommandTask(
        name="CLIROITest",
        executable=" CLIROITest ",
        input_spec=input_spec,
        output_spec=output_spec,
    )


class ComputeReflectiveCorrelationMetric:
    """
    title: Compute RC metric values in exhausive search
    category: Testing
    version: 5.2.0
    contributor: Ali Ghayoor
    """

    input_fields = [
        (
            "inputVolume",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "--inputVolume %s",
                    "help_string": "Input image.",
                    "exists": "True",
                },
            ),
        ),
        (
            "outputCSVFile",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "--outputCSVFile %s",
                    "help_string": "A file to write out final information report in CSV file: HA,BA,LR,MetricValue(cc)",
                    "hash_files": "False",
                },
            ),
        ),
    ]
    output_fields = [
        (
            "outputCSVFile",
            attr.ib(
                type=File,
                metadata={
                    "help_string": "A file to write out final information report in CSV file: HA,BA,LR,MetricValue(cc)",
                    "exists": "True",
                },
            ),
        )
    ]

    input_spec = SpecInfo(name="Input", fields=input_fields, bases=(ShellSpec,))
    output_spec = SpecInfo(name="Output", fields=output_fields, bases=(ShellSpec,))

    task = ShellCommandTask(
        name="ComputeReflectiveCorrelationMetric",
        executable=" ComputeReflectiveCorrelationMetric ",
        input_spec=input_spec,
        output_spec=output_spec,
    )


class GenerateAverageLmkFile:
    """
    title: Average Fiducials
    category: Testing
    description: This program gets several fcsv file each one contains several landmarks with the same name but slightly different coordinates. For EACH landmark we compute the average coordination.
    version: 5.2.0
    contributor: Ali Ghayoor
    """

    input_fields = [
        (
            "inputLandmarkFiles",
            attr.ib(
                type=InputMultiPath,
                metadata={
                    "argstr": "--inputLandmarkFiles %s",
                    "help_string": "Input landmark files names (.fcsv or .wts).",
                    "sep": ",",
                },
            ),
        ),
        (
            "inputLandmarkListFile",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "--inputLandmarkListFile %s",
                    "help_string": "A single file for a list of filenames one per line.",
                    "exists": "True",
                },
            ),
        ),
        (
            "outputLandmarkFile",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "--outputLandmarkFile %s",
                    "help_string": "Ouput landmark file name that includes average values for landmarks (.fcsv or .wts)",
                    "hash_files": "False",
                },
            ),
        ),
    ]
    output_fields = [
        (
            "outputLandmarkFile",
            attr.ib(
                type=File,
                metadata={
                    "help_string": "Ouput landmark file name that includes average values for landmarks (.fcsv or .wts)",
                    "exists": "True",
                },
            ),
        )
    ]

    input_spec = SpecInfo(name="Input", fields=input_fields, bases=(ShellSpec,))
    output_spec = SpecInfo(name="Output", fields=output_fields, bases=(ShellSpec,))

    task = ShellCommandTask(
        name="GenerateAverageLmkFile",
        executable=" GenerateAverageLmkFile ",
        input_spec=input_spec,
        output_spec=output_spec,
    )


class LandmarksCompare:
    """
    title: Compare Fiducials
    category: Testing
    description: Compares two .fcsv or .wts text files and verifies that they are identicle.  Used for testing landmarks files.
    version: 5.2.0
    contributor: Ali Ghayoor
    """

    input_fields = [
        (
            "inputLandmarkFile1",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "--inputLandmarkFile1 %s",
                    "help_string": "First input landmark file (.fcsv or .wts)",
                    "exists": "True",
                },
            ),
        ),
        (
            "inputLandmarkFile2",
            attr.ib(
                type=InputMultiPath,
                metadata={
                    "argstr": "--inputLandmarkFile2 %s",
                    "help_string": "Second input landmark file. This can be a vector of baseline file names (.fcsv or .wts)",
                    "sep": ",",
                },
            ),
        ),
        (
            "weights",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "--weights %s",
                    "help_string": "Weights on the tolerance to accept ( tolerance  / weights )",
                    "exists": "True",
                },
            ),
        ),
        (
            "tolerance",
            attr.ib(
                type=traits.Float,
                metadata={
                    "argstr": "--tolerance %f",
                    "help_string": "The maximum error (in mm) allowed in each direction of a landmark",
                },
            ),
        ),
    ]
    output_fields = []

    input_spec = SpecInfo(name="Input", fields=input_fields, bases=(ShellSpec,))
    output_spec = SpecInfo(name="Output", fields=output_fields, bases=(ShellSpec,))

    task = ShellCommandTask(
        name="LandmarksCompare",
        executable=" LandmarksCompare ",
        input_spec=input_spec,
        output_spec=output_spec,
    )
