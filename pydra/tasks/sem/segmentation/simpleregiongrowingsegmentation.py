"""
Autogenerated file - DO NOT EDIT
If you spot a bug, please report it on the mailing list and/or change the generator.
"""

import attr
from nipype.interfaces.base import (
    Directory,
    File,
    InputMultiPath,
    OutputMultiPath,
    traits,
)
from pydra import ShellCommandTask
from pydra.engine.specs import SpecInfo, ShellSpec


class SimpleRegionGrowingSegmentation:
    """
    title: Simple Region Growing Segmentation
    category: Segmentation
    description: A simple region growing segmentation algorithm based on intensity statistics. To create a list of fiducials (Seeds) for this algorithm, click on the tool bar icon of an arrow pointing to a sphere fiducial to enter the 'place a new object mode' and then use the Markups module. This module uses the Slicer Command Line Interface (CLI) and the ITK filters CurvatureFlowImageFilter and ConfidenceConnectedImageFilter.
    version: 0.1.0.$Revision$(alpha)
    documentation-url: http://www.slicer.org/slicerWiki/index.php/Documentation/Nightly/Modules/SimpleRegionGrowingSegmentation
    contributor: Jim Miller (GE)
    acknowledgements: This command module was derived from Insight/Examples (copyright) Insight Software Consortium
    """

    input_fields = [
        (
            "smoothingIterations",
            attr.ib(
                type=traits.Int,
                metadata={
                    "argstr": "--smoothingIterations %d",
                    "help_string": "Number of smoothing iterations",
                },
            ),
        ),
        (
            "timestep",
            attr.ib(
                type=traits.Float,
                metadata={
                    "argstr": "--timestep %f",
                    "help_string": "Timestep for curvature flow",
                },
            ),
        ),
        (
            "iterations",
            attr.ib(
                type=traits.Int,
                metadata={
                    "argstr": "--iterations %d",
                    "help_string": "Number of iterations of region growing",
                },
            ),
        ),
        (
            "multiplier",
            attr.ib(
                type=traits.Float,
                metadata={
                    "argstr": "--multiplier %f",
                    "help_string": "Number of standard deviations to include in intensity model",
                },
            ),
        ),
        (
            "neighborhood",
            attr.ib(
                type=traits.Int,
                metadata={
                    "argstr": "--neighborhood %d",
                    "help_string": "The radius of the neighborhood over which to calculate intensity model",
                },
            ),
        ),
        (
            "labelvalue",
            attr.ib(
                type=traits.Int,
                metadata={
                    "argstr": "--labelvalue %d",
                    "help_string": "The integer value (0-255) to use for the segmentation results. This will determine the color of the segmentation that will be generated by the Region growing algorithm",
                },
            ),
        ),
        (
            "seed",
            attr.ib(
                type=InputMultiPath,
                metadata={
                    "argstr": "--seed %s...",
                    "help_string": "Seed point(s) for region growing",
                },
            ),
        ),
        (
            "inputVolume",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "%s",
                    "help_string": "Input volume to be filtered",
                    "position": "-2",
                    "exists": "True",
                },
            ),
        ),
        (
            "outputVolume",
            attr.ib(
                type=File,
                metadata={
                    "argstr": "%s",
                    "help_string": "Output filtered",
                    "position": "-1",
                    "hash_files": "False",
                },
            ),
        ),
    ]
    output_fields = [
        (
            "outputVolume",
            attr.ib(
                type=File,
                metadata={
                    "help_string": "Output filtered",
                    "position": "-1",
                    "exists": "True",
                },
            ),
        )
    ]

    input_spec = SpecInfo(name="Input", fields=input_fields, bases=(ShellSpec,))
    output_spec = SpecInfo(name="Output", fields=output_fields, bases=(ShellSpec,))

    task = ShellCommandTask(
        name="SimpleRegionGrowingSegmentation",
        executable=" SimpleRegionGrowingSegmentation ",
        input_spec=input_spec,
        output_spec=output_spec,
    )
